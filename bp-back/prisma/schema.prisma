// Base Class must contain
// "id", "version", "createdAt", "updatedAt", "deletedAt", "status"
// Quando criar a entidade, criar o enum da assignment com o mesmo nome s√≥ que tudo maisculo

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleEnum {
  USER
  ADMIN
}

enum ModuleEnum {
  ADMIN
  USER
  CLIENT
  SOURCE
  PACKAGE
  COST_CENTER
  EVENT
  CLIENT_HISTORY
}

enum AssignmentsEnum {
  USER
  ADMIN
  CLIENT
  SOURCE
  PACKAGE
  COST_CENTER
  EVENT
  CLIENT_HISTORY
}

enum StatusEnum {
  ACTIVE
  PENDING
  INACTIVE
}

enum LogActionEnum {
  LOGIN
  CREATE
  UPDATE
  DELETE
  INACTIVE
  REACTIVE
  LOGOUT
  PASSWORD_RESET
  FIRST_ACCESS
  RESEND_EMAIL
  CHANGE_PERMISSION
  CHANGE_PASSWORD
  SEND_EMAIL_RECOVERY_PASSWORD
  CHANGE_PERSONAL_INFORMATION
  REFRESH_TOKEN
  BLOCK
  UNBLOCK
  MULTIPLE_LOGIN
  DISABLED_USER
}

enum LogStatusEnum {
  SUCCESS
  ERROR
}

enum MethodEnum {
  GET
  POST
  PUT
  PATCH
  DELETE
}

enum ApplicationEnum {
  INDIVIDUAL
  BUSINESS
  BOTH
}

enum EventTypeEnum {
  SYSTEM
  RESEARCH
}

enum EventEnum {
  LOGIN
  PASSWORD_RESET
}

model AuditLog {
  id          Int           @id @default(autoincrement())
  ip          String        @db.VarChar(255)
  email       String        @db.VarChar(255)
  url         String        @db.VarChar(2000)
  information String        @db.VarChar(2000)
  createdAt   DateTime      @default(now()) @db.Timestamptz(3)
  action      LogActionEnum
  status      LogStatusEnum
  method      MethodEnum

  @@map("TB_AUDIT_LOG")
}

model Event {
  id             String        @id @default(uuid()) @map("_id")
  ip             String?       @db.VarChar(255)
  type           EventTypeEnum @default(SYSTEM)
  event          EventEnum
  additionalData Json          @db.Json
  description    String        @db.VarChar(255)
  createdAt      DateTime      @default(now()) @db.Timestamptz(3)
  updatedAt      DateTime?     @updatedAt @db.Timestamptz(3)
  deletedAt      DateTime?     @db.Timestamptz(3)
  version        Int           @default(1)
  status         StatusEnum    @default(ACTIVE)

  userId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("TB_EVENT")
}

model User {
  id             String           @id @default(uuid()) @map("_id")
  name           String           @db.VarChar(255)
  email          String           @db.VarChar(255)
  password       String           @db.VarChar(255)
  loginAttempts  Int              @default(0)
  blocked        Boolean          @default(false)
  ip             String?          @db.VarChar(100)
  createdAt      DateTime         @default(now()) @db.Timestamptz(3)
  refreshToken   String?          @db.VarChar(255)
  recoveryToken  String?          @db.VarChar(255)
  updatedAt      DateTime?        @updatedAt @db.Timestamptz(3)
  deletedAt      DateTime?        @db.Timestamptz(3)
  version        Int              @default(1)
  mediaId        String?
  Media          Media?           @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  UserAssignment UserAssignment[]
  roleId         String
  Role           Role             @relation(fields: [roleId], references: [id], onDelete: Cascade)
  status         StatusEnum       @default(ACTIVE)

  events Event[]

  costCenters UserCostCenter[]
  sources     UserSource[]

  clientId   String?
  client     Client? @relation(fields: [clientId], references: [id])
  ownsClient Boolean @default(false)

  @@map("TB_USER")
}

model UserSource {
  User     User?   @relation(fields: [userId], references: [id])
  userId   String
  Source   Source? @relation(fields: [sourceId], references: [id])
  sourceId String

  createdAt DateTime   @default(now()) @db.Timestamptz(3)
  updatedAt DateTime?  @updatedAt @db.Timestamptz(3)
  deletedAt DateTime?  @db.Timestamptz(3)
  version   Int        @default(1)
  status    StatusEnum @default(ACTIVE)

  @@id([userId, sourceId])
  @@map("TB_USER_SOURCE")
}

model UserCostCenter {
  user   User   @relation(fields: [userId], references: [id])
  userId String

  costCenter   CostCenter @relation(fields: [costCenterId], references: [id])
  costCenterId String
  createdAt    DateTime   @default(now()) @db.Timestamptz(3)
  updatedAt    DateTime?  @updatedAt @db.Timestamptz(3)
  deletedAt    DateTime?  @db.Timestamptz(3)
  version      Int        @default(1)
  status       StatusEnum @default(ACTIVE)

  @@id([userId, costCenterId])
}

model Client {
  id                        String     @id @default(uuid()) @map("_id")
  name                      String     @db.VarChar(100)
  legalName                 String     @db.VarChar(100)
  cnpj                      String     @unique @db.VarChar(14)
  stateRegistration         String     @db.VarChar(20)
  municipalRegistration     String     @db.VarChar(20)
  contactPhone              String     @db.VarChar(15)
  contactEmail              String     @db.VarChar(255)
  primaryContactPerson      String     @db.VarChar(100)
  primaryContactPersonTitle String     @db.VarChar(50)
  useTaxInvoice             Boolean    @default(false)
  billingCycleDay           Int        @default(0)
  generalNote               String     @db.VarChar(255)
  discount                  Decimal    @default(0)
  blocked                   Boolean    @default(false)
  ip                        String?    @db.VarChar(100)
  createdAt                 DateTime   @default(now()) @db.Timestamptz(3)
  updatedAt                 DateTime?  @updatedAt @db.Timestamptz(3)
  deletedAt                 DateTime?  @db.Timestamptz(3)
  version                   Int        @default(1)
  status                    StatusEnum @default(ACTIVE)

  costCenters CostCenter[]
  packages    Package[]    @relation("ClientToPackage")

  observations ClientHistory[]

  users User[]

  primaryAddress   Address? @relation("PrimaryAddress", fields: [primaryAddressId], references: [id])
  primaryAddressId String?  @unique

  billingAddress   Address? @relation("BillingAddress", fields: [billingAddressId], references: [id])
  billingAddressId String?  @unique

  @@map("TB_CLIENT")
}

model ClientHistory {
  id          String     @id @default(uuid()) @map("_id")
  observation String     @db.VarChar(255)
  createdAt   DateTime   @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime?  @updatedAt @db.Timestamptz(3)
  deletedAt   DateTime?  @db.Timestamptz(3)
  version     Int        @default(1)
  status      StatusEnum @default(ACTIVE)

  clientId String
  client   Client @relation(fields: [clientId], references: [id])

  @@map("TB_CLIENT_HISTORY")
}

model Address {
  id                   String     @id @default(uuid()) @map("_id")
  street               String     @db.VarChar(255)
  number               String     @db.VarChar(10)
  complement           String     @db.VarChar(100)
  neighborhood         String     @db.VarChar(100)
  city                 String     @db.VarChar(100)
  state                String     @db.VarChar(2)
  zipCode              String     @db.VarChar(8)
  createdAt            DateTime   @default(now()) @db.Timestamptz(3)
  updatedAt            DateTime?  @updatedAt @db.Timestamptz(3)
  deletedAt            DateTime?  @db.Timestamptz(3)
  version              Int        @default(1)
  status               StatusEnum @default(ACTIVE)
  clientPrimaryAddress Client?    @relation("PrimaryAddress")
  clientBillingAddress Client?    @relation("BillingAddress")

  @@map("TB_ADDRESS")
}

model Package {
  id                     String     @id @default(uuid()) @map("_id")
  name                   String     @db.VarChar(100)
  deliveryForecastInDays Int        @default(0)
  simpleForm             Boolean    @default(false)
  notes                  String     @db.VarChar(255)
  createdAt              DateTime   @default(now()) @db.Timestamptz(3)
  updatedAt              DateTime?  @updatedAt @db.Timestamptz(3)
  deletedAt              DateTime?  @db.Timestamptz(3)
  version                Int        @default(1)
  status                 StatusEnum @default(ACTIVE)

  clientId String?

  clients Client[] @relation("ClientToPackage")

  Sources    Source[]     @relation("PackageToSource")
  PriceRange PriceRange[]

  @@map("TB_PACKAGE")
}

model PriceRange {
  id        String     @id @default(uuid()) @map("_id")
  amount    Int        @default(0)
  price     Decimal    @default(0)
  createdAt DateTime   @default(now()) @db.Timestamptz(3)
  updatedAt DateTime?  @updatedAt @db.Timestamptz(3)
  deletedAt DateTime?  @db.Timestamptz(3)
  version   Int        @default(1)
  status    StatusEnum @default(ACTIVE)

  Package   Package? @relation(fields: [packageId], references: [id])
  packageId String?

  @@map("TB_PRICE_RANGE")
}

model Source {
  id                  String          @id @default(uuid()) @map("_id")
  name                String          @db.VarChar(100)
  description         String          @db.VarChar(255)
  unitCost            Decimal         @default(0)
  validityInDays      Int             @default(0)
  createdAt           DateTime        @default(now()) @db.Timestamptz(3)
  updatedAt           DateTime?       @updatedAt @db.Timestamptz(3)
  deletedAt           DateTime?       @db.Timestamptz(3)
  version             Int             @default(1)
  status              StatusEnum      @default(ACTIVE)
  application         ApplicationEnum @default(INDIVIDUAL)

  requiredFieldsGeral String[]
  requiredFieldsPF    String[]
  requiredFieldsPJ    String[]
  extraInformation    String[]

  sources  UserSource[]
  packages Package[]    @relation("PackageToSource")

  @@map("TB_SOURCE")
}

model CostCenter {
  id          String     @id @default(uuid()) @map("_id")
  name        String     @db.VarChar(255)
  description String     @db.VarChar(255)
  createdAt   DateTime   @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime?  @updatedAt @db.Timestamptz(3)
  deletedAt   DateTime?  @db.Timestamptz(3)
  version     Int        @default(1)
  status      StatusEnum @default(ACTIVE)

  users UserCostCenter[]

  clientId String?
  client   Client? @relation(fields: [clientId], references: [id])

  @@map("TB_COST_CENTER")
}

model Module {
  id               String             @id @default(uuid()) @map("_id")
  name             ModuleEnum         @unique
  status           StatusEnum         @default(ACTIVE)
  RoleModules      RoleModule[]
  ModuleAssignment ModuleAssignment[]
  createdAt        DateTime           @default(now()) @db.Timestamptz(3)
  deletedAt        DateTime?          @db.Timestamptz(3)

  @@map("TB_MODULE")
}

model UserAssignment {
  id            String     @id @default(uuid()) @map("_id")
  create        Boolean    @default(false)
  read          Boolean    @default(false)
  update        Boolean    @default(false)
  delete        Boolean    @default(false)
  userId        String     @db.VarChar()
  User          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignmentsId String     @db.VarChar()
  Assignment    Assignment @relation(fields: [assignmentsId], references: [id], onDelete: Cascade)

  @@map("TB_USER_ASSIGNMENT")
}

model Assignment {
  id                 String             @id @default(uuid()) @map("_id")
  createdAt          DateTime           @default(now()) @db.Timestamptz(3)
  deletedAt          DateTime?          @db.Timestamptz(3)
  name               AssignmentsEnum    @unique
  status             StatusEnum         @default(ACTIVE)
  ProfileAssignments UserAssignment[]
  ModuleAssignment   ModuleAssignment[]

  @@map("TB_ASSIGNMENT")
}

model ModuleAssignment {
  id           String     @id @default(uuid()) @map("_id")
  assignmentId String     @db.VarChar()
  Assigments   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  moduleId     String
  Module       Module     @relation(fields: [moduleId], references: [id])

  @@map("TB_MODULE_ASSIGNMENT")
}

model Role {
  id         String       @id @default(uuid()) @map("_id")
  createdAt  DateTime     @default(now()) @db.Timestamptz(3)
  deletedAt  DateTime?    @db.Timestamptz(3)
  name       RoleEnum     @unique
  status     StatusEnum   @default(ACTIVE)
  User       User[]
  RoleModule RoleModule[]

  @@map("TB_ROLE")
}

model RoleModule {
  id       String @id @default(uuid()) @map("_id")
  Role     Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId   String @db.VarChar()
  Module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId String

  @@map("TB_ROLE_MODULE")
}

model Media {
  id          String   @id @default(uuid()) @map("_id")
  url         String   @db.VarChar(800)
  createdDate DateTime @default(now()) @db.Timestamptz(3)
  User        User[]

  @@map("TB_MEDIA")
}
